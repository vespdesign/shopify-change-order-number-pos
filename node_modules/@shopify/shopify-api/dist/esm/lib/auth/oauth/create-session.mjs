import { v4 } from 'uuid';
import { Session } from '../../session/session.mjs';
import { logger } from '../../logger/index.mjs';
import { getJwtSessionId, getOfflineId } from '../../session/session-utils.mjs';

function createSession({ config, accessTokenResponse, shop, state, }) {
    const associatedUser = accessTokenResponse
        .associated_user;
    const isOnline = Boolean(associatedUser);
    logger(config).info('Creating new session', { shop, isOnline });
    if (isOnline) {
        let sessionId;
        const responseBody = accessTokenResponse;
        const { access_token, scope, ...rest } = responseBody;
        const sessionExpiration = new Date(Date.now() + responseBody.expires_in * 1000);
        if (config.isEmbeddedApp) {
            sessionId = getJwtSessionId(config)(shop, `${rest.associated_user.id}`);
        }
        else {
            sessionId = v4();
        }
        return new Session({
            id: sessionId,
            shop,
            state,
            isOnline,
            accessToken: access_token,
            scope,
            expires: sessionExpiration,
            onlineAccessInfo: rest,
        });
    }
    else {
        return new Session({
            id: getOfflineId(config)(shop),
            shop,
            state,
            isOnline,
            accessToken: accessTokenResponse.access_token,
            scope: accessTokenResponse.scope,
        });
    }
}

export { createSession };
//# sourceMappingURL=create-session.mjs.map
