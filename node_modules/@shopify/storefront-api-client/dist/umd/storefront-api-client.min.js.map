{"version":3,"file":"storefront-api-client.min.js","sources":["../../../graphql-client/dist/graphql-client/constants.mjs","../../../graphql-client/dist/graphql-client/utilities.mjs","../../../graphql-client/dist/graphql-client/http-fetch.mjs","../../../graphql-client/dist/graphql-client/graphql-client.mjs","../../../graphql-client/dist/api-client-utilities/validations.mjs","../../../graphql-client/dist/api-client-utilities/api-versions.mjs","../../../src/constants.ts","../../../src/storefront-api-client.ts","../../../src/validations.ts","../../../graphql-client/dist/api-client-utilities/utilities.mjs"],"sourcesContent":["const CLIENT = 'GraphQL Client';\nconst MIN_RETRIES = 0;\nconst MAX_RETRIES = 3;\nconst GQL_API_ERROR = \"An error occurred while fetching from the API. Review 'graphQLErrors' for details.\";\nconst UNEXPECTED_CONTENT_TYPE_ERROR = 'Response returned unexpected Content-Type:';\nconst NO_DATA_OR_ERRORS_ERROR = 'An unknown error has occurred. The API did not return a data object or any errors in its response.';\nconst CONTENT_TYPES = {\n    json: 'application/json',\n    multipart: 'multipart/mixed',\n};\nconst SDK_VARIANT_HEADER = 'X-SDK-Variant';\nconst SDK_VERSION_HEADER = 'X-SDK-Version';\nconst DEFAULT_SDK_VARIANT = 'shopify-graphql-client';\n// This is value is replaced with package.json version during rollup build process\nconst DEFAULT_CLIENT_VERSION = '1.0.0';\nconst RETRY_WAIT_TIME = 1000;\nconst RETRIABLE_STATUS_CODES = [429, 503];\nconst DEFER_OPERATION_REGEX = /@(defer)\\b/i;\nconst NEWLINE_SEPARATOR = '\\r\\n';\nconst BOUNDARY_HEADER_REGEX = /boundary=\"?([^=\";]+)\"?/i;\nconst HEADER_SEPARATOR = NEWLINE_SEPARATOR + NEWLINE_SEPARATOR;\n\nexport { BOUNDARY_HEADER_REGEX, CLIENT, CONTENT_TYPES, DEFAULT_CLIENT_VERSION, DEFAULT_SDK_VARIANT, DEFER_OPERATION_REGEX, GQL_API_ERROR, HEADER_SEPARATOR, MAX_RETRIES, MIN_RETRIES, NEWLINE_SEPARATOR, NO_DATA_OR_ERRORS_ERROR, RETRIABLE_STATUS_CODES, RETRY_WAIT_TIME, SDK_VARIANT_HEADER, SDK_VERSION_HEADER, UNEXPECTED_CONTENT_TYPE_ERROR };\n//# sourceMappingURL=constants.mjs.map\n","import { MIN_RETRIES, MAX_RETRIES, CLIENT } from './constants.mjs';\n\nfunction formatErrorMessage(message, client = CLIENT) {\n    return message.startsWith(`${client}`) ? message : `${client}: ${message}`;\n}\nfunction getErrorMessage(error) {\n    return error instanceof Error ? error.message : JSON.stringify(error);\n}\nfunction getErrorCause(error) {\n    return error instanceof Error && error.cause ? error.cause : undefined;\n}\nfunction combineErrors(dataArray) {\n    return dataArray.flatMap(({ errors }) => {\n        return errors ?? [];\n    });\n}\nfunction validateRetries({ client, retries, }) {\n    if (retries !== undefined &&\n        (typeof retries !== 'number' ||\n            retries < MIN_RETRIES ||\n            retries > MAX_RETRIES)) {\n        throw new Error(`${client}: The provided \"retries\" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`);\n    }\n}\nfunction getKeyValueIfValid(key, value) {\n    return value &&\n        (typeof value !== 'object' ||\n            Array.isArray(value) ||\n            (typeof value === 'object' && Object.keys(value).length > 0))\n        ? { [key]: value }\n        : {};\n}\nfunction buildDataObjectByPath(path, data) {\n    if (path.length === 0) {\n        return data;\n    }\n    const key = path.pop();\n    const newData = {\n        [key]: data,\n    };\n    if (path.length === 0) {\n        return newData;\n    }\n    return buildDataObjectByPath(path, newData);\n}\nfunction combineObjects(baseObject, newObject) {\n    return Object.keys(newObject || {}).reduce((acc, key) => {\n        if ((typeof newObject[key] === 'object' || Array.isArray(newObject[key])) &&\n            baseObject[key]) {\n            acc[key] = combineObjects(baseObject[key], newObject[key]);\n            return acc;\n        }\n        acc[key] = newObject[key];\n        return acc;\n    }, Array.isArray(baseObject) ? [...baseObject] : { ...baseObject });\n}\nfunction buildCombinedDataObject([initialDatum, ...remainingData]) {\n    return remainingData.reduce(combineObjects, { ...initialDatum });\n}\n\nexport { buildCombinedDataObject, buildDataObjectByPath, combineErrors, formatErrorMessage, getErrorCause, getErrorMessage, getKeyValueIfValid, validateRetries };\n//# sourceMappingURL=utilities.mjs.map\n","import { CLIENT, RETRY_WAIT_TIME, RETRIABLE_STATUS_CODES } from './constants.mjs';\nimport { formatErrorMessage, getErrorMessage } from './utilities.mjs';\n\nfunction generateHttpFetch({ clientLogger, customFetchApi = fetch, client = CLIENT, defaultRetryWaitTime = RETRY_WAIT_TIME, retriableCodes = RETRIABLE_STATUS_CODES, }) {\n    const httpFetch = async (requestParams, count, maxRetries) => {\n        const nextCount = count + 1;\n        const maxTries = maxRetries + 1;\n        let response;\n        try {\n            response = await customFetchApi(...requestParams);\n            clientLogger({\n                type: 'HTTP-Response',\n                content: {\n                    requestParams,\n                    response,\n                },\n            });\n            if (!response.ok &&\n                retriableCodes.includes(response.status) &&\n                nextCount <= maxTries) {\n                throw new Error();\n            }\n            return response;\n        }\n        catch (error) {\n            if (nextCount <= maxTries) {\n                const retryAfter = response?.headers.get('Retry-After');\n                await sleep(retryAfter ? parseInt(retryAfter, 10) : defaultRetryWaitTime);\n                clientLogger({\n                    type: 'HTTP-Retry',\n                    content: {\n                        requestParams,\n                        lastResponse: response,\n                        retryAttempt: count,\n                        maxRetries,\n                    },\n                });\n                return httpFetch(requestParams, nextCount, maxRetries);\n            }\n            throw new Error(formatErrorMessage(`${maxRetries > 0\n                ? `Attempted maximum number of ${maxRetries} network retries. Last message - `\n                : ''}${getErrorMessage(error)}`, client));\n        }\n    };\n    return httpFetch;\n}\nasync function sleep(waitTime) {\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\n\nexport { generateHttpFetch };\n//# sourceMappingURL=http-fetch.mjs.map\n","import { generateHttpFetch } from './http-fetch.mjs';\nimport { CLIENT, SDK_VARIANT_HEADER, SDK_VERSION_HEADER, DEFAULT_SDK_VARIANT, DEFAULT_CLIENT_VERSION, DEFER_OPERATION_REGEX, CONTENT_TYPES, UNEXPECTED_CONTENT_TYPE_ERROR, GQL_API_ERROR, NO_DATA_OR_ERRORS_ERROR, BOUNDARY_HEADER_REGEX, RETRY_WAIT_TIME, HEADER_SEPARATOR } from './constants.mjs';\nimport { validateRetries, formatErrorMessage, getErrorMessage, getErrorCause, getKeyValueIfValid, combineErrors, buildCombinedDataObject, buildDataObjectByPath } from './utilities.mjs';\n\nfunction createGraphQLClient({ headers, url, customFetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch({\n        customFetchApi,\n        clientLogger,\n        defaultRetryWaitTime: RETRY_WAIT_TIME,\n    });\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    const requestStream = generateRequestStream(fetch);\n    return {\n        config,\n        fetch,\n        request,\n        requestStream,\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...getKeyValueIfValid('data', data),\n        ...getKeyValueIfValid('extensions', extensions),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: formatErrorMessage(errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR),\n                    ...getKeyValueIfValid('graphQLErrors', errors),\n                    response,\n                },\n            }\n            : {}),\n    };\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const flatHeaders = Object.entries({\n            ...headers,\n            ...overrideHeaders,\n        }).reduce((headers, [key, value]) => {\n            headers[key] = Array.isArray(value) ? value.join(', ') : value.toString();\n            return headers;\n        }, {});\n        if (!flatHeaders[SDK_VARIANT_HEADER] && !flatHeaders[SDK_VERSION_HEADER]) {\n            flatHeaders[SDK_VARIANT_HEADER] = DEFAULT_SDK_VARIANT;\n            flatHeaders[SDK_VERSION_HEADER] = DEFAULT_CLIENT_VERSION;\n        }\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: 'POST',\n                headers: flatHeaders,\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        if (DEFER_OPERATION_REGEX.test(props[0])) {\n            throw new Error(formatErrorMessage('This operation will result in a streamable response - use requestStream() instead.'));\n        }\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get('content-type') || '';\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(statusText),\n                        response,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`),\n                        response,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\nasync function* getStreamBodyIterator(response) {\n    const decoder = new TextDecoder();\n    // Response body is an async iterator\n    if (response.body[Symbol.asyncIterator]) {\n        for await (const chunk of response.body) {\n            yield decoder.decode(chunk);\n        }\n    }\n    else {\n        const reader = response.body.getReader();\n        let readResult;\n        try {\n            while (!(readResult = await reader.read()).done) {\n                yield decoder.decode(readResult.value);\n            }\n        }\n        finally {\n            reader.cancel();\n        }\n    }\n}\nfunction readStreamChunk(streamBodyIterator, boundary) {\n    return {\n        async *[Symbol.asyncIterator]() {\n            try {\n                let buffer = '';\n                for await (const textChunk of streamBodyIterator) {\n                    buffer += textChunk;\n                    if (buffer.indexOf(boundary) > -1) {\n                        const lastBoundaryIndex = buffer.lastIndexOf(boundary);\n                        const fullResponses = buffer.slice(0, lastBoundaryIndex);\n                        const chunkBodies = fullResponses\n                            .split(boundary)\n                            .filter((chunk) => chunk.trim().length > 0)\n                            .map((chunk) => {\n                            const body = chunk\n                                .slice(chunk.indexOf(HEADER_SEPARATOR) + HEADER_SEPARATOR.length)\n                                .trim();\n                            return body;\n                        });\n                        if (chunkBodies.length > 0) {\n                            yield chunkBodies;\n                        }\n                        buffer = buffer.slice(lastBoundaryIndex + boundary.length);\n                        if (buffer.trim() === `--`) {\n                            buffer = '';\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                throw new Error(`Error occured while processing stream payload - ${getErrorMessage(error)}`);\n            }\n        },\n    };\n}\nfunction createJsonResponseAsyncIterator(response) {\n    return {\n        async *[Symbol.asyncIterator]() {\n            const processedResponse = await processJSONResponse(response);\n            yield {\n                ...processedResponse,\n                hasNext: false,\n            };\n        },\n    };\n}\nfunction getResponseDataFromChunkBodies(chunkBodies) {\n    return chunkBodies\n        .map((value) => {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            throw new Error(`Error in parsing multipart response - ${getErrorMessage(error)}`);\n        }\n    })\n        .map((payload) => {\n        const { data, incremental, hasNext, extensions, errors } = payload;\n        // initial data chunk\n        if (!incremental) {\n            return {\n                data: data || {},\n                ...getKeyValueIfValid('errors', errors),\n                ...getKeyValueIfValid('extensions', extensions),\n                hasNext,\n            };\n        }\n        // subsequent data chunks\n        const incrementalArray = incremental.map(({ data, path, errors }) => {\n            return {\n                data: data && path ? buildDataObjectByPath(path, data) : {},\n                ...getKeyValueIfValid('errors', errors),\n            };\n        });\n        return {\n            data: incrementalArray.length === 1\n                ? incrementalArray[0].data\n                : buildCombinedDataObject([\n                    ...incrementalArray.map(({ data }) => data),\n                ]),\n            ...getKeyValueIfValid('errors', combineErrors(incrementalArray)),\n            hasNext,\n        };\n    });\n}\nfunction validateResponseData(responseErrors, combinedData) {\n    if (responseErrors.length > 0) {\n        throw new Error(GQL_API_ERROR, {\n            cause: {\n                graphQLErrors: responseErrors,\n            },\n        });\n    }\n    if (Object.keys(combinedData).length === 0) {\n        throw new Error(NO_DATA_OR_ERRORS_ERROR);\n    }\n}\nfunction createMultipartResponseAsyncInterator(response, responseContentType) {\n    const boundaryHeader = (responseContentType ?? '').match(BOUNDARY_HEADER_REGEX);\n    const boundary = `--${boundaryHeader ? boundaryHeader[1] : '-'}`;\n    if (!response.body?.getReader &&\n        !response.body[Symbol.asyncIterator]) {\n        throw new Error('API multipart response did not return an iterable body', {\n            cause: response,\n        });\n    }\n    const streamBodyIterator = getStreamBodyIterator(response);\n    let combinedData = {};\n    let responseExtensions;\n    return {\n        async *[Symbol.asyncIterator]() {\n            try {\n                let streamHasNext = true;\n                for await (const chunkBodies of readStreamChunk(streamBodyIterator, boundary)) {\n                    const responseData = getResponseDataFromChunkBodies(chunkBodies);\n                    responseExtensions =\n                        responseData.find((datum) => datum.extensions)?.extensions ??\n                            responseExtensions;\n                    const responseErrors = combineErrors(responseData);\n                    combinedData = buildCombinedDataObject([\n                        combinedData,\n                        ...responseData.map(({ data }) => data),\n                    ]);\n                    streamHasNext = responseData.slice(-1)[0].hasNext;\n                    validateResponseData(responseErrors, combinedData);\n                    yield {\n                        ...getKeyValueIfValid('data', combinedData),\n                        ...getKeyValueIfValid('extensions', responseExtensions),\n                        hasNext: streamHasNext,\n                    };\n                }\n                if (streamHasNext) {\n                    throw new Error(`Response stream terminated unexpectedly`);\n                }\n            }\n            catch (error) {\n                const cause = getErrorCause(error);\n                yield {\n                    ...getKeyValueIfValid('data', combinedData),\n                    ...getKeyValueIfValid('extensions', responseExtensions),\n                    errors: {\n                        message: formatErrorMessage(getErrorMessage(error)),\n                        networkStatusCode: response.status,\n                        ...getKeyValueIfValid('graphQLErrors', cause?.graphQLErrors),\n                        response,\n                    },\n                    hasNext: false,\n                };\n            }\n        },\n    };\n}\nfunction generateRequestStream(fetch) {\n    return async (...props) => {\n        if (!DEFER_OPERATION_REGEX.test(props[0])) {\n            throw new Error(formatErrorMessage('This operation does not result in a streamable response - use request() instead.'));\n        }\n        try {\n            const response = await fetch(...props);\n            const { statusText } = response;\n            if (!response.ok) {\n                throw new Error(statusText, { cause: response });\n            }\n            const responseContentType = response.headers.get('content-type') || '';\n            switch (true) {\n                case responseContentType.includes(CONTENT_TYPES.json):\n                    return createJsonResponseAsyncIterator(response);\n                case responseContentType.includes(CONTENT_TYPES.multipart):\n                    return createMultipartResponseAsyncInterator(response, responseContentType);\n                default:\n                    throw new Error(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${responseContentType}`, { cause: response });\n            }\n        }\n        catch (error) {\n            return {\n                async *[Symbol.asyncIterator]() {\n                    const response = getErrorCause(error);\n                    yield {\n                        errors: {\n                            message: formatErrorMessage(getErrorMessage(error)),\n                            ...getKeyValueIfValid('networkStatusCode', response?.status),\n                            ...getKeyValueIfValid('response', response),\n                        },\n                        hasNext: false,\n                    };\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n","function validateDomainAndGetStoreUrl({ client, storeDomain, }) {\n    try {\n        if (!storeDomain || typeof storeDomain !== 'string') {\n            throw new Error();\n        }\n        const trimmedDomain = storeDomain.trim();\n        const protocolUrl = trimmedDomain.match(/^https?:/)\n            ? trimmedDomain\n            : `https://${trimmedDomain}`;\n        const url = new URL(protocolUrl);\n        url.protocol = 'https';\n        return url.origin;\n    }\n    catch (_error) {\n        throw new Error(`${client}: a valid store domain (\"${storeDomain}\") must be provided`);\n    }\n}\nfunction validateApiVersion({ client, currentSupportedApiVersions, apiVersion, logger, }) {\n    const versionError = `${client}: the provided apiVersion (\"${apiVersion}\")`;\n    const supportedVersion = `Currently supported API versions: ${currentSupportedApiVersions.join(', ')}`;\n    if (!apiVersion || typeof apiVersion !== 'string') {\n        throw new Error(`${versionError} is invalid. ${supportedVersion}`);\n    }\n    const trimmedApiVersion = apiVersion.trim();\n    if (!currentSupportedApiVersions.includes(trimmedApiVersion)) {\n        if (logger) {\n            logger({\n                type: 'Unsupported_Api_Version',\n                content: {\n                    apiVersion,\n                    supportedApiVersions: currentSupportedApiVersions,\n                },\n            });\n        }\n        else {\n            console.warn(`${versionError} is likely deprecated or not supported. ${supportedVersion}`);\n        }\n    }\n}\n\nexport { validateApiVersion, validateDomainAndGetStoreUrl };\n//# sourceMappingURL=validations.mjs.map\n","function getQuarterMonth(quarter) {\n    const month = quarter * 3 - 2;\n    return month === 10 ? month : `0${month}`;\n}\nfunction getPrevousVersion(year, quarter, nQuarter) {\n    const versionQuarter = quarter - nQuarter;\n    if (versionQuarter <= 0) {\n        return `${year - 1}-${getQuarterMonth(versionQuarter + 4)}`;\n    }\n    return `${year}-${getQuarterMonth(versionQuarter)}`;\n}\nfunction getCurrentApiVersion() {\n    const date = new Date();\n    const month = date.getUTCMonth();\n    const year = date.getUTCFullYear();\n    const quarter = Math.floor(month / 3 + 1);\n    return {\n        year,\n        quarter,\n        version: `${year}-${getQuarterMonth(quarter)}`,\n    };\n}\nfunction getCurrentSupportedApiVersions() {\n    const { year, quarter, version: currentVersion } = getCurrentApiVersion();\n    const nextVersion = quarter === 4\n        ? `${year + 1}-01`\n        : `${year}-${getQuarterMonth(quarter + 1)}`;\n    return [\n        getPrevousVersion(year, quarter, 3),\n        getPrevousVersion(year, quarter, 2),\n        getPrevousVersion(year, quarter, 1),\n        currentVersion,\n        nextVersion,\n        'unstable',\n    ];\n}\n\nexport { getCurrentApiVersion, getCurrentSupportedApiVersions };\n//# sourceMappingURL=api-versions.mjs.map\n",null,null,null,"function generateGetHeaders(config) {\n    return (customHeaders) => {\n        return { ...(customHeaders ?? {}), ...config.headers };\n    };\n}\nfunction generateGetGQLClientParams({ getHeaders, getApiUrl }) {\n    return (operation, options) => {\n        const props = [operation];\n        if (options && Object.keys(options).length > 0) {\n            const { variables, apiVersion: propApiVersion, headers, retries } = options;\n            props.push({\n                ...(variables ? { variables } : {}),\n                ...(headers ? { headers: getHeaders(headers) } : {}),\n                ...(propApiVersion ? { url: getApiUrl(propApiVersion) } : {}),\n                ...(retries ? { retries } : {}),\n            });\n        }\n        return props;\n    };\n}\n\nexport { generateGetGQLClientParams, generateGetHeaders };\n//# sourceMappingURL=utilities.mjs.map\n"],"names":["CLIENT","MIN_RETRIES","MAX_RETRIES","GQL_API_ERROR","UNEXPECTED_CONTENT_TYPE_ERROR","NO_DATA_OR_ERRORS_ERROR","CONTENT_TYPES","json","multipart","SDK_VARIANT_HEADER","SDK_VERSION_HEADER","DEFAULT_SDK_VARIANT","DEFAULT_CLIENT_VERSION","RETRY_WAIT_TIME","RETRIABLE_STATUS_CODES","DEFER_OPERATION_REGEX","BOUNDARY_HEADER_REGEX","HEADER_SEPARATOR","NEWLINE_SEPARATOR","formatErrorMessage","message","client","startsWith","getErrorMessage","error","Error","JSON","stringify","getErrorCause","cause","undefined","combineErrors","dataArray","flatMap","errors","validateRetries","retries","getKeyValueIfValid","key","value","Array","isArray","Object","keys","length","buildDataObjectByPath","path","data","newData","pop","combineObjects","baseObject","newObject","reduce","acc","buildCombinedDataObject","initialDatum","remainingData","generateHttpFetch","clientLogger","customFetchApi","fetch","defaultRetryWaitTime","retriableCodes","httpFetch","async","requestParams","count","maxRetries","nextCount","maxTries","response","type","content","ok","includes","status","retryAfter","headers","get","waitTime","Promise","resolve","setTimeout","sleep","parseInt","lastResponse","retryAttempt","createGraphQLClient","url","logger","config","logContent","generateClientLogger","operation","options","variables","overrideHeaders","overrideUrl","overrideRetries","body","query","flatHeaders","entries","join","toString","method","generateFetch","request","props","test","statusText","contentType","processJSONResponse","networkStatusCode","generateRequest","requestStream","responseContentType","Symbol","asyncIterator","processedResponse","hasNext","createJsonResponseAsyncIterator","boundaryHeader","match","boundary","getReader","streamBodyIterator","decoder","TextDecoder","chunk","decode","reader","readResult","read","done","cancel","getStreamBodyIterator","responseExtensions","combinedData","streamHasNext","chunkBodies","buffer","textChunk","indexOf","lastBoundaryIndex","lastIndexOf","slice","split","filter","trim","map","readStreamChunk","responseData","getResponseDataFromChunkBodies","find","datum","extensions","responseErrors","validateResponseData","graphQLErrors","createMultipartResponseAsyncInterator","generateRequestStream","parse","payload","incremental","incrementalArray","validateApiVersion","currentSupportedApiVersions","apiVersion","versionError","supportedVersion","trimmedApiVersion","supportedApiVersions","console","warn","getQuarterMonth","quarter","month","getPrevousVersion","year","nQuarter","versionQuarter","getCurrentSupportedApiVersions","version","currentVersion","date","Date","getUTCMonth","getUTCFullYear","Math","floor","getCurrentApiVersion","nextVersion","DEFAULT_CONTENT_TYPE","storeDomain","publicAccessToken","privateAccessToken","clientName","storeUrl","trimmedDomain","protocolUrl","URL","protocol","origin","_error","validateDomainAndGetStoreUrl","baseApiVersionValidationParams","validateRequiredAccessTokens","window","validatePrivateAccessTokenUsage","apiUrlFormatter","defaultApiVersion","urlApiVersion","generateApiUrlFormatter","Accept","apiUrl","graphqlClient","getHeaders","customHeaders","generateGetHeaders","getApiUrl","propApiVersion","generateGetApiUrl","getGQLClientParams","push","generateGetGQLClientParams","freeze"],"mappings":"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"}